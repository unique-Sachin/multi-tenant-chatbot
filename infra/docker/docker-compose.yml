version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: zibtek-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: zibtek-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: zibtek
      POSTGRES_USER: zibtek
      POSTGRES_PASSWORD: zibtek_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../sql/001_init.sql:/docker-entrypoint-initdb.d/001_init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zibtek -d zibtek"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile
    container_name: zibtek-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - ../../.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ../../.env:/app/.env:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  streamlit:
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile
    container_name: zibtek-streamlit
    restart: unless-stopped
    ports:
      - "8501:8501"
    env_file:
      - ../../.env
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ../../.env:/app/.env:ro
    command: ["streamlit", "run", "src/ui/app.py", "--server.port=8501", "--server.address=0.0.0.0"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  default:
    name: zibtek-network